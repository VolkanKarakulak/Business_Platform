// <auto-generated />
using System;
using Business_Platform.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Business_Platform.Migrations
{
    [DbContext(typeof(Business_PlatformContext))]
    [Migration("20240518111024_updateLike")]
    partial class updateLike
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Business_Platform.Model.CompanyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyCategories");
                });

            modelBuilder.Entity("Business_Platform.Model.Food.FoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RestaurantBranchId")
                        .HasColumnType("int");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantBranchId");

                    b.HasIndex("StateId");

                    b.ToTable("FoodCategories");
                });

            modelBuilder.Entity("Business_Platform.Model.Food.FoodCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("CompanyCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte?>("StateId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCategoryId");

                    b.HasIndex("StateId");

                    b.ToTable("FoodCompanies");
                });

            modelBuilder.Entity("Business_Platform.Model.Food.RestaurantBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("FoodCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("FoodCompanyId");

                    b.HasIndex("StateId");

                    b.ToTable("RestaurantBranches");
                });

            modelBuilder.Entity("Business_Platform.Model.Food.RestaurantBranchComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CommmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RestaurantBranchId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantBranchId");

                    b.ToTable("RestaurantBranchComments");
                });

            modelBuilder.Entity("Business_Platform.Model.Food.RestaurantBranchFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FoodCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageFileName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("RestaurantBranchId")
                        .HasColumnType("int");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("FoodCategoryId");

                    b.HasIndex("RestaurantBranchId");

                    b.HasIndex("StateId");

                    b.ToTable("RestaurantBranchFoods");
                });

            modelBuilder.Entity("Business_Platform.Model.Food.RestaurantBranchUser", b =>
                {
                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RestaurantBranchId")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("AppUserId", "RestaurantBranchId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantBranchUsers");
                });

            modelBuilder.Entity("Business_Platform.Model.Food.RestaurantFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FoodCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("FoodCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ImageFileName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int?>("RestaurantBranchId")
                        .HasColumnType("int");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("FoodCategoryId");

                    b.HasIndex("FoodCompanyId");

                    b.HasIndex("RestaurantBranchId");

                    b.HasIndex("StateId");

                    b.ToTable("RestaurantFoods");
                });

            modelBuilder.Entity("Business_Platform.Model.Identity.AppRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Business_Platform.Model.Identity.AppUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("FoodCompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MainCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("OfficeCompanyBranchId")
                        .HasColumnType("int");

                    b.Property<int?>("OfficeCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RestaurantBranchId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCategoryId");

                    b.HasIndex("FoodCompanyId");

                    b.HasIndex("MainCompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OfficeCompanyId");

                    b.HasIndex("RestaurantBranchId");

                    b.HasIndex("StateId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Business_Platform.Model.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("FoodCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("OfficeCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("OfficeProdBranchProduct")
                        .HasColumnType("int");

                    b.Property<int?>("OfficeProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantFoodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("FoodCompanyId");

                    b.HasIndex("OfficeCompanyId");

                    b.HasIndex("OfficeProdBranchProduct");

                    b.HasIndex("ProductId");

                    b.HasIndex("RestaurantFoodId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Business_Platform.Model.MainCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("MainCompanies");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.BranchProductComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CommmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfficeProdBranchProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfficeProdBranchProductId");

                    b.ToTable("BranchProductComment");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.ManageOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long?>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OfferDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("OfferPrice")
                        .HasColumnType("float");

                    b.Property<int?>("OfficeCompanyBranchId")
                        .HasColumnType("int");

                    b.Property<int?>("OfficeCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("OfficeProductOfferId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("OfficeCompanyBranchId");

                    b.HasIndex("OfficeCompanyId");

                    b.HasIndex("OfficeProductOfferId");

                    b.HasIndex("ProductId");

                    b.ToTable("ManageOffers");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CompanyCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCategoryId");

                    b.HasIndex("StateId");

                    b.ToTable("OfficeCompanies");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeCompanyBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("OfficeCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCategoryId");

                    b.HasIndex("OfficeCompanyId");

                    b.HasIndex("StateId");

                    b.ToTable("OfficeCompanyBranches");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeCompBranchUser", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("OfficeCompanyBranchId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "OfficeCompanyBranchId");

                    b.HasIndex("OfficeCompanyBranchId");

                    b.ToTable("OfficeCompBranchUser");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeProdBranchProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfficeCompanyBranchId")
                        .HasColumnType("int");

                    b.Property<int>("OfficeProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfficeCompanyBranchId");

                    b.HasIndex("OfficeProductId");

                    b.ToTable("OfficeProdBranchProducts");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageFileName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OfficeCompanyBranchId")
                        .HasColumnType("int");

                    b.Property<int>("OfficeCompanyId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("OfficeCompanyBranchId");

                    b.HasIndex("OfficeCompanyId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("StateId");

                    b.ToTable("OfficeProducts");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeProductComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CommmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfficeProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfficeProductId");

                    b.ToTable("OfficeProductComment");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeProductOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("OfferDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("OfferPrice")
                        .HasColumnType("float");

                    b.Property<int?>("OfficeCompanyBranchId")
                        .HasColumnType("int");

                    b.Property<int?>("OfficeCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("OfficeProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OfficeCompanyBranchId");

                    b.HasIndex("OfficeCompanyId");

                    b.HasIndex("OfficeProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("OfficeProductOffers");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OfficeProductType");
                });

            modelBuilder.Entity("Business_Platform.Model.State", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Business_Platform.Model.Food.FoodCategory", b =>
                {
                    b.HasOne("Business_Platform.Model.Food.RestaurantBranch", "RestaurantBranch")
                        .WithMany("FoodCategories")
                        .HasForeignKey("RestaurantBranchId");

                    b.HasOne("Business_Platform.Model.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RestaurantBranch");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Business_Platform.Model.Food.FoodCompany", b =>
                {
                    b.HasOne("Business_Platform.Model.CompanyCategory", "CompanyCategory")
                        .WithMany()
                        .HasForeignKey("CompanyCategoryId");

                    b.HasOne("Business_Platform.Model.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("CompanyCategory");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Business_Platform.Model.Food.RestaurantBranch", b =>
                {
                    b.HasOne("Business_Platform.Model.Food.FoodCompany", "FoodCompany")
                        .WithMany("RestaurantBranches")
                        .HasForeignKey("FoodCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business_Platform.Model.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodCompany");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Business_Platform.Model.Food.RestaurantBranchComment", b =>
                {
                    b.HasOne("Business_Platform.Model.Food.RestaurantBranch", "RestaurantBranch")
                        .WithMany("RestaurantBranchComments")
                        .HasForeignKey("RestaurantBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RestaurantBranch");
                });

            modelBuilder.Entity("Business_Platform.Model.Food.RestaurantBranchFood", b =>
                {
                    b.HasOne("Business_Platform.Model.Food.FoodCategory", "FoodCategory")
                        .WithMany()
                        .HasForeignKey("FoodCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business_Platform.Model.Food.RestaurantBranch", "RestaurantBranch")
                        .WithMany()
                        .HasForeignKey("RestaurantBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business_Platform.Model.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodCategory");

                    b.Navigation("RestaurantBranch");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Business_Platform.Model.Food.RestaurantBranchUser", b =>
                {
                    b.HasOne("Business_Platform.Model.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business_Platform.Model.Food.RestaurantBranch", "RestaurantBranch")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AppUser");

                    b.Navigation("RestaurantBranch");
                });

            modelBuilder.Entity("Business_Platform.Model.Food.RestaurantFood", b =>
                {
                    b.HasOne("Business_Platform.Model.Food.FoodCategory", "FoodCategory")
                        .WithMany("RestaurantFoods")
                        .HasForeignKey("FoodCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business_Platform.Model.Food.FoodCompany", null)
                        .WithMany("RestaurantFoods")
                        .HasForeignKey("FoodCompanyId");

                    b.HasOne("Business_Platform.Model.Food.RestaurantBranch", null)
                        .WithMany("RestaurantFoods")
                        .HasForeignKey("RestaurantBranchId");

                    b.HasOne("Business_Platform.Model.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodCategory");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Business_Platform.Model.Identity.AppUser", b =>
                {
                    b.HasOne("Business_Platform.Model.CompanyCategory", "CompanyCategory")
                        .WithMany()
                        .HasForeignKey("CompanyCategoryId");

                    b.HasOne("Business_Platform.Model.Food.FoodCompany", "FoodCompany")
                        .WithMany("AppUsers")
                        .HasForeignKey("FoodCompanyId");

                    b.HasOne("Business_Platform.Model.MainCompany", "MainCompany")
                        .WithMany("AppUsers")
                        .HasForeignKey("MainCompanyId");

                    b.HasOne("Business_Platform.Model.Office.OfficeCompany", "OfficeCompany")
                        .WithMany("AppUsers")
                        .HasForeignKey("OfficeCompanyId");

                    b.HasOne("Business_Platform.Model.Office.OfficeCompanyBranch", "OfficeCompanyBranch")
                        .WithMany("AppUsers")
                        .HasForeignKey("OfficeCompanyId");

                    b.HasOne("Business_Platform.Model.Food.RestaurantBranch", "RestaurantBranch")
                        .WithMany()
                        .HasForeignKey("RestaurantBranchId");

                    b.HasOne("Business_Platform.Model.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyCategory");

                    b.Navigation("FoodCompany");

                    b.Navigation("MainCompany");

                    b.Navigation("OfficeCompany");

                    b.Navigation("OfficeCompanyBranch");

                    b.Navigation("RestaurantBranch");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Business_Platform.Model.Like", b =>
                {
                    b.HasOne("Business_Platform.Model.Identity.AppUser", "AppUser")
                        .WithMany("Likes")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business_Platform.Model.Food.FoodCompany", "FoodCompany")
                        .WithMany()
                        .HasForeignKey("FoodCompanyId");

                    b.HasOne("Business_Platform.Model.Office.OfficeCompany", "OfficeCompany")
                        .WithMany()
                        .HasForeignKey("OfficeCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business_Platform.Model.Office.OfficeProdBranchProduct", "ProductProduct")
                        .WithMany()
                        .HasForeignKey("OfficeProdBranchProduct");

                    b.HasOne("Business_Platform.Model.Office.OfficeProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Business_Platform.Model.Food.RestaurantFood", "RestaurantFood")
                        .WithMany()
                        .HasForeignKey("RestaurantFoodId");

                    b.Navigation("AppUser");

                    b.Navigation("FoodCompany");

                    b.Navigation("OfficeCompany");

                    b.Navigation("Product");

                    b.Navigation("ProductProduct");

                    b.Navigation("RestaurantFood");
                });

            modelBuilder.Entity("Business_Platform.Model.MainCompany", b =>
                {
                    b.HasOne("Business_Platform.Model.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.BranchProductComment", b =>
                {
                    b.HasOne("Business_Platform.Model.Office.OfficeProdBranchProduct", "OfficeProdBranchProduct")
                        .WithMany("OfficeProductComments")
                        .HasForeignKey("OfficeProdBranchProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OfficeProdBranchProduct");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.ManageOffer", b =>
                {
                    b.HasOne("Business_Platform.Model.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("Business_Platform.Model.Office.OfficeCompanyBranch", "OfficeCompanyBranch")
                        .WithMany()
                        .HasForeignKey("OfficeCompanyBranchId");

                    b.HasOne("Business_Platform.Model.Office.OfficeCompany", "OfficeCompany")
                        .WithMany()
                        .HasForeignKey("OfficeCompanyId");

                    b.HasOne("Business_Platform.Model.Office.OfficeProductOffer", "OfficeProductOffer")
                        .WithMany()
                        .HasForeignKey("OfficeProductOfferId");

                    b.HasOne("Business_Platform.Model.Office.OfficeProdBranchProduct", "OfficeProdBranchProduct")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("AppUser");

                    b.Navigation("OfficeCompany");

                    b.Navigation("OfficeCompanyBranch");

                    b.Navigation("OfficeProdBranchProduct");

                    b.Navigation("OfficeProductOffer");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeCompany", b =>
                {
                    b.HasOne("Business_Platform.Model.CompanyCategory", "CompanyCategory")
                        .WithMany()
                        .HasForeignKey("CompanyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business_Platform.Model.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CompanyCategory");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeCompanyBranch", b =>
                {
                    b.HasOne("Business_Platform.Model.CompanyCategory", "CompanyCategory")
                        .WithMany()
                        .HasForeignKey("CompanyCategoryId");

                    b.HasOne("Business_Platform.Model.Office.OfficeCompany", "OfficeCompany")
                        .WithMany("Branches")
                        .HasForeignKey("OfficeCompanyId");

                    b.HasOne("Business_Platform.Model.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CompanyCategory");

                    b.Navigation("OfficeCompany");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeCompBranchUser", b =>
                {
                    b.HasOne("Business_Platform.Model.Office.OfficeCompanyBranch", "OfficeCompanyBranch")
                        .WithMany()
                        .HasForeignKey("OfficeCompanyBranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Business_Platform.Model.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("OfficeCompanyBranch");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeProdBranchProduct", b =>
                {
                    b.HasOne("Business_Platform.Model.Office.OfficeCompanyBranch", "OfficeCompanyBranch")
                        .WithMany("OfficeProdBranchProducts")
                        .HasForeignKey("OfficeCompanyBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business_Platform.Model.Office.OfficeProduct", "OfficeProduct")
                        .WithMany("OfficeProdBranchProducts")
                        .HasForeignKey("OfficeProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OfficeCompanyBranch");

                    b.Navigation("OfficeProduct");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeProduct", b =>
                {
                    b.HasOne("Business_Platform.Model.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business_Platform.Model.Office.OfficeCompanyBranch", "OfficeCompanyBranch")
                        .WithMany()
                        .HasForeignKey("OfficeCompanyBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business_Platform.Model.Office.OfficeCompany", "OfficeCompany")
                        .WithMany("Products")
                        .HasForeignKey("OfficeCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business_Platform.Model.Office.OfficeProductType", "OfficeProductType")
                        .WithMany("OfficeProducts")
                        .HasForeignKey("ProductTypeId");

                    b.HasOne("Business_Platform.Model.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("OfficeCompany");

                    b.Navigation("OfficeCompanyBranch");

                    b.Navigation("OfficeProductType");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeProductComment", b =>
                {
                    b.HasOne("Business_Platform.Model.Office.OfficeProduct", "OfficeProduct")
                        .WithMany("ProductComments")
                        .HasForeignKey("OfficeProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OfficeProduct");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeProductOffer", b =>
                {
                    b.HasOne("Business_Platform.Model.Office.OfficeCompanyBranch", "OfficeCompanyBranch")
                        .WithMany("OfficeProductOffers")
                        .HasForeignKey("OfficeCompanyBranchId");

                    b.HasOne("Business_Platform.Model.Office.OfficeCompany", "OfficeCompany")
                        .WithMany("Offers")
                        .HasForeignKey("OfficeCompanyId");

                    b.HasOne("Business_Platform.Model.Office.OfficeProduct", null)
                        .WithMany("OfficeProductOffers")
                        .HasForeignKey("OfficeProductId");

                    b.HasOne("Business_Platform.Model.Office.OfficeProdBranchProduct", "OfficeProdBranchProduct")
                        .WithMany("OfficeProductOffers")
                        .HasForeignKey("ProductId");

                    b.HasOne("Business_Platform.Model.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("OfficeCompany");

                    b.Navigation("OfficeCompanyBranch");

                    b.Navigation("OfficeProdBranchProduct");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Business_Platform.Model.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Business_Platform.Model.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Business_Platform.Model.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Business_Platform.Model.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business_Platform.Model.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Business_Platform.Model.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Business_Platform.Model.Food.FoodCategory", b =>
                {
                    b.Navigation("RestaurantFoods");
                });

            modelBuilder.Entity("Business_Platform.Model.Food.FoodCompany", b =>
                {
                    b.Navigation("AppUsers");

                    b.Navigation("RestaurantBranches");

                    b.Navigation("RestaurantFoods");
                });

            modelBuilder.Entity("Business_Platform.Model.Food.RestaurantBranch", b =>
                {
                    b.Navigation("FoodCategories");

                    b.Navigation("RestaurantBranchComments");

                    b.Navigation("RestaurantFoods");
                });

            modelBuilder.Entity("Business_Platform.Model.Identity.AppUser", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Business_Platform.Model.MainCompany", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeCompany", b =>
                {
                    b.Navigation("AppUsers");

                    b.Navigation("Branches");

                    b.Navigation("Offers");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeCompanyBranch", b =>
                {
                    b.Navigation("AppUsers");

                    b.Navigation("OfficeProdBranchProducts");

                    b.Navigation("OfficeProductOffers");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeProdBranchProduct", b =>
                {
                    b.Navigation("OfficeProductComments");

                    b.Navigation("OfficeProductOffers");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeProduct", b =>
                {
                    b.Navigation("OfficeProdBranchProducts");

                    b.Navigation("OfficeProductOffers");

                    b.Navigation("ProductComments");
                });

            modelBuilder.Entity("Business_Platform.Model.Office.OfficeProductType", b =>
                {
                    b.Navigation("OfficeProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
